msgid ""
msgstr "Project-Id-Version: Game v4.7.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: Wed May 28 21:42:22 2025\n"
"Last-Translator: \n"
"Language-Team: none\n"
"Language: en\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit"

#: GameServer.RpcHandlers
msgid "level completed! ðŸŽ‰"
msgstr ""

#: GameServer.RpcHandlers
msgid "level completed with warningsâ€¦ ðŸŽ­"
msgstr ""

#: GameServer.RpcHandlers
msgid "intermediate goal solved! ðŸŽ‰"
msgstr ""

#: Game.Levels.TermWorld.L01_Substitution
msgid "Substitution"
msgstr ""

#: Game.Levels.TermWorld.L01_Substitution
msgid "A key idea of the lambda calculus is *substitution*. Intuitively, it is the\n"
"simple idea that functions taking arguments. For instance, we might have a\n"
"function that adds together numbers:\n"
"$$(Î» x \\, . \\, Î» y \\, . \\, x + y)$$\n"
"\n"
"When expect that when we *apply* some arguments, that we should consistently\n"
"replace variable names to in some sense evaluate the function. This turns out to\n"
"be somewhat subtle. For instance, if we define variables in an abstraction as\n"
"strings, the terms $(Î» x \\, .  \\, x)$ and $(Î» y \\, .  \\, y)$ become\n"
"*syntactically* distinct, despite both representing what looks like an identity\n"
"function.\n"
"\n"
"In this game we choose the *locally nameless* representation, which is in fact\n"
"what Lean itself uses. This method syntactically distinguishes between the\n"
"*free* and *bound* variables of a term.\n"
"\n"
"Bound variables use *de Bruijn indices*, which refers to a\n"
"bound variable by a natural number that indicates how far away its binding is.\n"
"The example of addition above now becomes $(Î» \\, . \\, Î» \\, . \\, 1 + 0)$, while\n"
"both of the identity terms above become $(Î» \\, . \\, 0)$.\n"
"\n"
"In the locally nameless representation, substitution means substitution of free\n"
"variables, which now has no concern of overlap with bound variables. As an\n"
"example, let's try proving that $(Î» \\, . \\, X)[X := Y] = (Î» \\, . \\, Y)$."
msgstr ""

#: Game.Levels.TermWorld.L01_Substitution
msgid "You can use either `unfold` or `simp` with `Term.subst`."
msgstr ""

#: Game.Levels.TermWorld.L01_Substitution
msgid "Next, we'll see what the equivalent of substitution is for bound\n"
"variables"
msgstr ""

#: Game.Levels.TermWorld.L01_Substitution
msgid "```\n"
"inductive Term\n"
"| bvar : â„• â†’ Term\n"
"| fvar : â„• â†’ Term\n"
"| lam  : Term â†’ Term\n"
"| app  : Term â†’ Term â†’ Term\n"
"```\n"
"\n"
"`Term` is a lambda calculus term, using the locally nameless representation."
msgstr ""

#: Game.Levels.TermWorld.L01_Substitution
msgid "```\n"
"def Term.subst (x : â„•) (sub : Term) : Term â†’ Term\n"
"| bvar i  => bvar i\n"
"| fvar x' => if x = x' then sub else fvar x'\n"
"| app l r => app (subst x sub l) (subst x sub r)\n"
"| lam M   => lam $ subst x sub M\n"
"```\n"
"\n"
"Replacement of a free variable by a term."
msgstr ""

#: Game.Levels.TermWorld
msgid "Term World"
msgstr ""

#: Game.Levels.TermWorld
msgid "Welcome to Term World! Here we will define what a lambda term is in Lean, along\n"
"with a few operations that allow us to perform various kinds of substitutions.\n"
"At its core, the lambda calculus is \"just\" functions of a single variables. As\n"
"we'll see however, there are some tricky aspects to formalizing this in a proof\n"
"assistant."
msgstr ""

#: Game
msgid "Lambda Calculus Game"
msgstr ""

#: Game
msgid "# Welcome to the Lambda Calculus Game!\n"
"\n"
"In this game we will define and prove properties of the untyped and simply typed\n"
"lambda calculus. We assume as a prerequisite some familiarity with Lean, but not\n"
"much more than is present in the [Natural Number\n"
"Game](https://adam.math.hhu.de/#/g/leanprover-community/nng4)."
msgstr ""

#: Game
msgid "## Credits\n"
"\n"
"* **Authors**: Chris Henson\n"
"* **Game Engine**: Jon Eugster, Alexander Bentkamp, Patrick Massot"
msgstr ""

#: Game
msgid "An introduction to formalized metatheory"
msgstr ""

#: Game
msgid "In this game you will prove properties of the untyped and simply\n"
"typed lambda calculus. Topics include type safety, confluence, and an\n"
"introduction to semantics."
msgstr ""
